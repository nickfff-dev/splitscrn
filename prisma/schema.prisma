generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_idx")
}

model deposit {
  id       Int    @id @default(autoincrement())
  amount   Float
  userId   String
  date     String
  time     String
  txHash   String
  credits  Int
  walletId Int
  fees     Float?

  @@index([walletId], map: "Deposit_walletId_idx")
}

model draft {
  name     String  @unique(map: "Draft_name_key")
  date     String?
  time     String?
  leagueId Int?

  @@index([leagueId], map: "Draft_leagueId_idx")
}

model fixture {
  id           Int    @id @default(autoincrement())
  MatchId      String
  DateTime_UTC String
  Team1        String
  Team2        String
  Tab          String
  leagueId     Int?

  @@index([leagueId], map: "Fixture_leagueId_idx")
}

model league {
  id              Int     @id @default(autoincrement())
  name            String  @unique(map: "League_name_key")
  duration        Int?
  buyIn           String? @db.VarChar(255)
  buyInFee        Int?
  inviteOnly      String
  owner           String
  maxPlayers      Int
  minPlayers      Int
  region          String
  inviteCode      String? @db.VarChar(255)
  endDate         String
  startDate       String
  draftTime       String
  points          Float?
  draftReady      Boolean @default(false)
  populateRosters Boolean @default(false)
}

model mainwallet {
  id       Int   @id @default(autoincrement())
  balance  Float
  credits  Int
  houseFee Int
}

model participant {
  id                  Int      @id @default(autoincrement())
  username            String   @db.VarChar(255)
  points              Float?
  leagueId            Int?
  adc                 String?  @db.VarChar(100)
  jungle              String?  @db.VarChar(100)
  mid                 String?  @db.VarChar(100)
  support             String?  @db.VarChar(100)
  team                String?  @db.VarChar(100)
  top                 String?  @db.VarChar(100)
  fantasyname         String?  @unique(map: "Participant_fantasyname_key") @db.VarChar(255)
  leaguename          String?  @db.VarChar(255)
  draftOrder          Int?
  draftName           String?
  userId              String?
  confirmedAttendance Boolean? @default(false)
  inviteCode          String?  @db.VarChar(255)
  inviteComplete      Boolean? @default(false)
  isReady             Boolean? @default(false)
  adcPoints           Float?
  junglePoints        Float?
  midPoints           Float?
  supportPoints       Float?
  teamPoints          Float?
  topPoints           Float?

  @@index([draftName], map: "Participant_draftName_idx")
  @@index([leagueId], map: "Participant_leagueId_idx")
}

model playerresult {
  name           String
  team           String
  role           String
  creepScore     Int?
  visionScore    Int?
  kills          Int?
  deaths         Int?
  assists        Int?
  game           String
  teamTotalKills Int?
  points         Float?
  leagueId       Int?
  date           String?
  id             Int     @id @default(autoincrement())
  participantId  Int
  playerId       Int?
  team1          String?
  team2          String?
  region         String?

  @@unique([name, game, participantId], map: "PlayerResult_name_game_participantId_key")
  @@index([leagueId], map: "PlayerResult_leagueId_idx")
}

model players {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(255)
  slug       String?  @db.VarChar(255)
  team       String?  @db.VarChar(100)
  position   String   @db.VarChar(100)
  points     Float?
  leagueId   Int?
  selected   Boolean? @default(false)
  selectedBy String?
  region     String?

  @@unique([name, leagueId], map: "Players_name_leagueId_key")
  @@index([leagueId], map: "Players_leagueId_idx")
}

model session {
  id           String   @id
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_idx")
}

model teamresult {
  game            String
  teamKills       Int?
  dragonKills     Int?
  riftHeraldKills Int?
  turretKills     Int?
  inhibitorKills  Int?
  baronKills      Int?
  didWin          Boolean?
  points          Float?
  leagueId        Int?
  date            String?
  id              Int      @id @default(autoincrement())
  participantId   Int
  teamId          Int?
  name            String
  team1           String?
  team2           String?
  region          String?

  @@unique([name, game, participantId], map: "TeamResult_name_game_participantId_key")
  @@index([leagueId], map: "TeamResult_leagueId_idx")
}

model teams {
  id         Int     @id @default(autoincrement())
  name       String  @db.VarChar(255)
  slug       String? @db.VarChar(255)
  top        String  @db.VarChar(100)
  jungle     String  @db.VarChar(100)
  mid        String  @db.VarChar(100)
  adc        String  @db.VarChar(100)
  support    String  @db.VarChar(100)
  points     Float?
  leagueId   Int?
  selected   Boolean @default(false)
  region     String?
  selectedBy String?

  @@index([leagueId], map: "Teams_leagueId_idx")
}

model trade {
  id            Int    @id @default(autoincrement())
  playerIn      String
  playerOut     String
  date          String
  participantId Int
  leagueId      Int

  @@index([participantId], map: "Trade_participantId_idx")
}

model user {
  id               String   @id
  name             String?
  userName         String?  @unique(map: "User_userName_key")
  email            String?  @unique(map: "User_email_key")
  emailVerified    Boolean?
  birthDate        String?
  country          String?
  province         String?
  image            String?
  admin            Boolean  @default(false)
  walletkey        String?
  verificationCode Int?
  session      session[]
  accounts         account[]
}

model verificationtoken {
  identifier String
  token      String   @unique(map: "VerificationToken_token_key")
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
}

model wallet {
  id      Int    @id @default(autoincrement())
  balance Float
  userId  String @unique(map: "Wallet_userId_key")
  credits Int?
}

model withdrawal {
  id       Int    @id @default(autoincrement())
  amount   Float
  userId   String
  date     String
  time     String
  txHash   String @unique(map: "Withdrawal_txHash_key")
  credits  Int
  walletId Int
  fees     Float?

  @@index([walletId], map: "Withdrawal_walletId_idx")
}
