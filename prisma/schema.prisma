generator client {
  provider        = "prisma-client-js"

}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  relationMode = "prisma"
}

// AUTH MODELS
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id               String    @id @default(cuid())
  name             String?
  userName         String?   @unique
  email            String?   @unique
  emailVerified    Boolean?
  verificationCode Int?
  birthDate        String?
  country          String?
  province         String?
  image            String?
  admin            Boolean   @default(false)
  accounts         Account[]
  sessions         Session[]
  Wallet           Wallet[]
  walletkey        String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// FANTASY MODELS

model League {
  id              Int            @id @default(autoincrement())
  name            String         @unique
  draftTime       String
  startDate       String
  endDate         String
  duration        Int?           @db.Int
  buyIn           String?        @db.VarChar(255)
  buyInFee        Int?           @db.Int
  inviteOnly      String
  inviteCode      String?        @db.VarChar(255)
  owner           String
  maxPlayers      Int
  minPlayers      Int
  points          Float?
  draftReady      Boolean        @default(false)
  populateRosters Boolean        @default(false)
  region          String
  teams           Teams[]
  players         Players[]
  fixtures        Fixture[]
  members         Participant[]
  Draft           Draft[]
  PlayerResult    PlayerResult[]
  TeamResult      TeamResult[]
}

model Teams {
  id       Int     @id @default(autoincrement())
  name     String  @db.VarChar(255)
  slug     String? @db.VarChar(255)
  top      String  @db.VarChar(100)
  jungle   String  @db.VarChar(100)
  mid      String  @db.VarChar(100)
  adc      String  @db.VarChar(100)
  support  String  @db.VarChar(100)
  points   Float?
  region   String?
  leagueId Int?
  League   League? @relation(fields: [leagueId], references: [id])
  selected Boolean @default(false)
  selectedBy String?

  @@index([leagueId])
}

model Players {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(255)
  slug       String?  @db.VarChar(255)
  team       String?  @db.VarChar(100)
  position   String   @db.VarChar(100)
  points     Float?
  region     String?
  leagueId   Int?
  League     League?  @relation(fields: [leagueId], references: [id])
  selected   Boolean? @default(false)
  selectedBy String?

  @@unique([name, leagueId])
  @@index([leagueId])
}

model Participant {
  id                  Int      @id @default(autoincrement())
  username            String   @db.VarChar(255)
  top               String?  @db.VarChar(100)
  topPoints           Float?
  jungle              String?  @db.VarChar(100)
  junglePoints        Float?
  mid                 String?  @db.VarChar(100)
  midPoints           Float?
  adc                 String?  @db.VarChar(100)
  adcPoints           Float?
  inviteCode          String?  @db.VarChar(255)
  inviteComplete      Boolean? @default(false)
  confirmedAttendance Boolean? @default(false)
  support             String?  @db.VarChar(100)
  supportPoints       Float?
  team                String?  @db.VarChar(100)
  teamPoints          Float?
  points              Float?
  draftOrder          Int?     @db.Int
  leaguename          String?  @db.VarChar(255)
  isReady             Boolean? @default(false)
  leagueId            Int?
  userId              String?
  fantasyname         String?  @unique @db.VarChar(255)
  League              League?  @relation(fields: [leagueId], references: [id])
  Draft               Draft?   @relation(fields: [draftName], references: [name])
  draftName           String?
  Trade               Trade[]

  @@index([leagueId])
  @@index([draftName])
}

model Fixture {
  id           Int     @id @default(autoincrement())
  MatchId      String
  DateTime_UTC String
  Team1        String
  Team2        String
  Tab          String
  leagueId     Int?
  League       League? @relation(fields: [leagueId], references: [id])

  @@index([leagueId])
}

model Draft {
  name     String        @unique
  date     String?
  time     String?
  leagueId Int?
  members  Participant[]
  League   League?       @relation(fields: [leagueId], references: [id])

  @@index([leagueId])
}

model PlayerResult {
  id             Int     @id @default(autoincrement())
  name           String
  team           String
  role           String
  creepScore     Int?
  visionScore    Int?
  region        String?
  team1          String?
  team2          String?
  kills          Int?
  deaths         Int?
  assists        Int?
  game           String
  teamTotalKills Int?
  points         Float?
  leagueId       Int?
  league         League? @relation(fields: [leagueId], references: [id])
  date           String?
  participantId  Int
  playerId       Int?

  @@unique([name, game, participantId])
  @@index([leagueId])
}

model TeamResult {
  id              Int      @id @default(autoincrement())
  name            String
  game            String
  teamKills       Int?
  region         String?

  dragonKills     Int?
  riftHeraldKills Int?
  turretKills     Int?
  inhibitorKills  Int?
  team1           String?
  team2           String?
  baronKills      Int?
  didWin          Boolean?
  points          Float?
  leagueId        Int?
  league          League?  @relation(fields: [leagueId], references: [id])
  date            String?
  teamId          Int?
  participantId   Int

  @@unique([name, game, participantId])
  @@index([leagueId])
}

model Wallet {
  id         Int          @id @default(autoincrement())
  balance    Float
  userId     String       @unique
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  credits    Int?
  Deposit    Deposit[]
  Withdrawal Withdrawal[]
}

model Deposit {
  id       Int    @id @default(autoincrement())
  amount   Float
  userId   String
  walletId Int
  wallet   Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
  date     String
  time     String
  txHash   String
  credits  Int
  fees     Float?

  @@index([walletId])
}

model Withdrawal {
  id       Int    @id @default(autoincrement())
  amount   Float
  userId   String
  walletId Int
  wallet   Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
  date     String
  time     String
  txHash   String @unique
  credits  Int
  fees     Float?

  @@index([walletId])
}

model MainWallet {
  id       Int   @id @default(autoincrement())
  balance  Float
  credits  Int
  houseFee Int
}

model Trade {
  id            Int         @id @default(autoincrement())
  playerIn      String
  playerOut     String
  date          String
  participantId Int
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  leagueId      Int

  @@index([participantId])
}
